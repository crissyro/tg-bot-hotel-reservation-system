import logging
from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from models.postgres_models import RoomStatusEnum
from services.postgres_crud.room_crud import RoomCRUD
from services.postgres_database import PostgresDatabase
from keyboards.admin import (
    admin_panel_keyboard,
    rooms_management_keyboard
)

admin_rooms_router = Router()

@admin_rooms_router.callback_query(F.data == "admin_menu")
async def admin_menu_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üõ† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=admin_panel_keyboard()
    )

@admin_rooms_router.callback_query(F.data == "rooms_management")
async def handle_rooms_management(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üè® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞–º–∏:",
        reply_markup=rooms_management_keyboard()
    )

@admin_rooms_router.callback_query(F.data == "admin_stats")
async def show_statistics(callback: types.CallbackQuery, postgres_db: PostgresDatabase):
    try:
        async with postgres_db.session_scope() as session:
            crud = RoomCRUD(session)
            stats = await crud.get_rooms_statistics()
            
            text = (
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n\n"
                f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {stats['total_income']:.2f}‚ÇΩ\n"
                f"üìÖ –í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {stats['total_bookings']}\n"
                f"üè® –í—Å–µ–≥–æ –Ω–æ–º–µ—Ä–æ–≤: {stats['total_rooms']}\n"
                f"‚úÖ –°–≤–æ–±–æ–¥–Ω–æ: {stats['available_rooms']}\n"
                f"‚õî –ó–∞–Ω—è—Ç–æ: {stats['total_rooms'] - stats['available_rooms']}"
            )
            
            await callback.message.edit_text(
                text,
                reply_markup=InlineKeyboardBuilder()
                    .button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")
                    .as_markup()
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@admin_rooms_router.callback_query(F.data == "rooms_list")
async def list_rooms(callback: types.CallbackQuery, postgres_db: PostgresDatabase):
    try:
        async with postgres_db.session_scope() as session:
            crud = RoomCRUD(session)
            await crud.refresh_rooms_availability()  
            rooms = await crud.get_all_rooms()
        
        if not rooms:
            await callback.answer("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤")
            return

        text = "üè® –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤:\n\n"
        for idx, room in enumerate(rooms, 1):
            status = "‚úÖ" if room.status == RoomStatusEnum.AVAILABLE else "‚õî"
            text += f"{idx}. {status} ‚Ññ{room.number} ({room.type}) - {room.price}‚ÇΩ\n"

        builder = InlineKeyboardBuilder()
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="rooms_management")
        
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logging.error(f"List rooms error: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞")
        
@admin_rooms_router.callback_query(F.data == "refresh_statuses")
async def refresh_room_statuses(callback: types.CallbackQuery, postgres_db: PostgresDatabase):
    try:
        async with postgres_db.session_scope() as session:
            crud = RoomCRUD(session)
            await crud.refresh_rooms_availability()
            await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å—ã –Ω–æ–º–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            await list_rooms(callback, postgres_db)
    except Exception as e:
        logging.error(f"Refresh error: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤")