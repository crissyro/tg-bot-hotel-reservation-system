import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

from sqlalchemy import select
from sqlalchemy.orm import joinedload
from models.postgres_models import Booking
from keyboards.user import main_keyboard, back_keyboard
from services.postgres_crud.room_crud import RoomCRUD
from services.postgres_crud.booking_crud import BookingCRUD
from services.postgres_crud.user_crud import UserCRUD
from aiogram.fsm.state import State, StatesGroup

class BookingFSM(StatesGroup):
    choosing_dates = State()
    selecting_room = State()
    confirming_booking = State()
    choosing_booking_to_pay = State()
    choosing_payment_method = State()
    
booking_router = Router()

@booking_router.message(F.text == "‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard())
    
async def validate_date(date_str: str) -> datetime | None:
    try:
        return datetime.strptime(date_str, "%d.%m.%Y")
    except ValueError:
        return None

@booking_router.message(F.text == "üõé –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def start_booking(message: Message, state: FSMContext):
    await message.answer(
        "\U0001F4C5 –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.MM.–ì–ì–ì–ì</b>:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 25.05.2025",
        reply_markup=back_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(BookingFSM.choosing_dates)
    await state.update_data(check_in=None)

@booking_router.message(BookingFSM.choosing_dates)
async def choose_dates(message: Message, state: FSMContext, **kwargs):
    session = kwargs.get("session")
    if session is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=back_keyboard())
        return

    state_data = await state.get_data()
    date = await validate_date(message.text)

    if not date:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.MM.–ì–ì–ì–ì", reply_markup=back_keyboard())
        return

    if not state_data.get("check_in"):
        await state.update_data(check_in=date)
        await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì:", reply_markup=back_keyboard())
        return

    check_in = state_data["check_in"]
    if date <= check_in:
        await message.answer("‚ùó –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞", reply_markup=back_keyboard())
        return

    room_crud = RoomCRUD(session)
    available_rooms = await room_crud.get_available_rooms(check_in, date)

    if not available_rooms:
        await message.answer("üòï –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã", reply_markup=back_keyboard())
        await state.clear()
        return

    builder = InlineKeyboardBuilder()
    for i, room in enumerate(available_rooms, 1):
        builder.button(text=f"{room.human_name} - {room.price}‚ÇΩ", callback_data=f"select_{room.id}")
        if i % 2 == 0:
            builder.row()  

    await state.update_data(check_out=date, rooms=[r.id for r in available_rooms])
    await message.answer("üè® –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä:", reply_markup=builder.as_markup())
    await state.set_state(BookingFSM.selecting_room)

@booking_router.callback_query(F.data.startswith("select_"))
async def select_room(callback: CallbackQuery, state: FSMContext):
    room_id = int(callback.data.split("_")[1])
    await state.update_data(selected_room=room_id)

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="confirm_booking")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_booking")
    builder.row()

    await callback.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–æ–º–µ—Ä. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ:", reply_markup=builder.as_markup())
    
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard())
    
@booking_router.callback_query(F.data == "confirm_booking")
async def confirm_booking(callback: CallbackQuery, state: FSMContext, session):
    data = await state.get_data()
    user_crud = UserCRUD(session)
    booking_crud = BookingCRUD(session)
    room_crud = RoomCRUD(session)
    logging.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {callback.from_user.id}")
    user = await user_crud.get_user_by_telegram_id(callback.from_user.id)
    logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {user}")
    if not user:
        user = await user_crud.create_user(
            telegram_id=callback.from_user.id,
            name=callback.from_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
            surname=callback.from_user.last_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        )

    room = await room_crud.get_room_by_id(data["selected_room"])
    if not room:
        await callback.answer("‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    days = (data["check_out"] - data["check_in"]).days
    total_price = room.price * days

    booking = await booking_crud.create_booking(
        total_price=total_price,
        user_id=user.id,
        room_id=room.id,
        check_in=data["check_in"],
        check_out=data["check_out"]
    )

    await room_crud.refresh_rooms_availability()
    await room_crud.auto_update_statuses()

    check_in_str = data["check_in"].strftime("%d.%m.%Y")
    check_out_str = data["check_out"].strftime("%d.%m.%Y")
    await callback.message.edit_text(
        f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\n"
        f"üè® –ù–æ–º–µ—Ä: {room.human_name}\n"
        f"üìÖ –ó–∞–µ–∑–¥: {check_in_str}\n"
        f"üìÖ –í—ã–µ–∑–¥: {check_out_str}\n"
        f"üí∞ –ò—Ç–æ–≥–æ: {total_price}‚ÇΩ"
    )
    
    await callback.message.answer(
    "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
    reply_markup=main_keyboard()
    )
    
    await state.clear()
    
@booking_router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state == BookingFSM.selecting_room.state:
        await state.set_state(BookingFSM.choosing_dates)
        await message.answer(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.MM.–ì–ì–ì–ì</b>:",
            reply_markup=back_keyboard(),
            parse_mode="HTML"
        )
    elif current_state == BookingFSM.confirming_booking.state:
        await state.set_state(BookingFSM.selecting_room)
        await message.answer("üè® –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä:", reply_markup=back_keyboard())
    else:
        await message.answer("üîô –í—ã —É–∂–µ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ.", reply_markup=main_keyboard())

@booking_router.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –±—Ä–æ–Ω—å")
async def pay_booking_start(message: Message, state: FSMContext, session):
    user_crud = UserCRUD(session)
    user = await user_crud.get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=main_keyboard())
        return

    booking_crud = BookingCRUD(session)
    bookings = await booking_crud.get_unpaid_bookings_by_user_id(user.id)

    if not bookings:
        await message.answer("üí≥ –£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–µ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã.", reply_markup=main_keyboard())
        return

    stmt = (
        select(Booking)
        .where(Booking.user_id == user.id)
        .options(joinedload(Booking.room))  
    )
    result = await session.execute(stmt)
    bookings = result.unique().scalars().all()

    builder = InlineKeyboardBuilder()
    for b in bookings:
        check_in = b.check_in.strftime("%d.%m.%Y")
        check_out = b.check_out.strftime("%d.%m.%Y")
        builder.button(
            text=f"‚Ññ{b.id}: {b.room.human_name} —Å {check_in} –ø–æ {check_out} ‚Äî {b.total_price}‚ÇΩ",
            callback_data=f"pay_{b.id}"
        )
    builder.button(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="pay_back")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω—å –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=builder.as_markup())
    await state.set_state(BookingFSM.choosing_booking_to_pay)

@booking_router.callback_query(F.data.startswith("pay_"), BookingFSM.choosing_booking_to_pay)
async def pay_booking_select(callback: CallbackQuery, state: FSMContext):
    booking_id = int(callback.data.split("_")[1])
    await state.update_data(booking_id=booking_id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∞", callback_data="method_card"),
            InlineKeyboardButton(text="ü™ô –ë–∏—Ç–∫–æ–∏–Ω", callback_data="method_bitcoin"),
            InlineKeyboardButton(text="üè¶ –°–±–µ—Ä–ü–µ–π", callback_data="method_sberpay"),
        ],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="pay_cancel")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)
    await state.set_state(BookingFSM.choosing_payment_method)

@booking_router.callback_query(F.data.startswith("method_"), BookingFSM.choosing_payment_method)
async def pay_booking_method_selected(callback: CallbackQuery, state: FSMContext, session):
    data = await state.get_data()
    booking_id = data.get("booking_id")
    payment_method = callback.data.split("_")[1]

    booking_crud = BookingCRUD(session)
    await booking_crud.mark_as_paid(booking_id)

    await callback.message.edit_text(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –±—Ä–æ–Ω–∏ ‚Ññ{booking_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ {payment_method.capitalize()}!\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É.",
        reply_markup=None  
    )
    await state.clear()
@booking_router.callback_query(F.data == "pay_back", BookingFSM.choosing_booking_to_pay)
async def pay_back_to_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard())

@booking_router.callback_query(F.data == "pay_cancel", BookingFSM.choosing_payment_method)
async def pay_cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_keyboard())
    
@booking_router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å")
async def cancel_booking_start(message: Message, state: FSMContext, session):
    user_crud = UserCRUD(session)
    user = await user_crud.get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=main_keyboard())
        return

    booking_crud = BookingCRUD(session)
    bookings = await booking_crud.get_active_bookings_by_user_id(user.id)  

    if not bookings:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=main_keyboard())
        return

    builder = InlineKeyboardBuilder()
    for b in bookings:
        check_in = b.check_in.strftime("%d.%m.%Y")
        check_out = b.check_out.strftime("%d.%m.%Y")
        builder.button(
            text=f"‚Ññ{b.id}: {b.room.human_name} —Å {check_in} –ø–æ {check_out} (–û—Ç–º–µ–Ω–∏—Ç—å)",
            callback_data=f"cancel_{b.id}"
        )
    builder.button(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel_back")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=builder.as_markup())
    await state.set_state(BookingFSM.choosing_booking_to_pay)

@booking_router.callback_query(F.data.startswith("cancel_"))
async def cancel_booking_confirm(callback: CallbackQuery, state: FSMContext, session):
    try:
        booking_id = int(callback.data.split("_")[1])
        booking_crud = BookingCRUD(session)
        await booking_crud.cancel_booking(booking_id)
        await callback.message.edit_text(
            "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=None  
        )
        await state.clear()
    except (IndexError, ValueError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –±—Ä–æ–Ω–∏")

@booking_router.callback_query(F.data == "cancel_back")
async def cancel_back_to_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard())