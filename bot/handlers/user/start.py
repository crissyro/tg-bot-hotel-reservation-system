from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from services.postgres_crud.user_crud import UserCRUD
from keyboards.user import main_keyboard

start_router = Router()

class Registration(StatesGroup):
    waiting_for_name = State()
    waiting_for_surname = State()


@start_router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext, session):
    user_crud = UserCRUD(session)
    await user_crud.get_or_create_user(
        telegram_id=message.from_user.id,
        name=message.from_user.first_name,
        surname=message.from_user.last_name or ""
    )
    
    await state.clear()
    await message.answer(
        "üè® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Luxury Hotel Bot</b>!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ üõå –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä\n"
        "‚Ä¢ üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(Registration.waiting_for_name)
    
@start_router.message(Registration.waiting_for_name, F.text)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Registration.waiting_for_surname)

@start_router.message(Registration.waiting_for_surname, F.text)
async def process_surname(message: types.Message, state: FSMContext, session):
    data = await state.get_data()
    name = data.get("name")
    surname = message.text

    user_crud = UserCRUD(session)
    user = await user_crud.get_or_create_user(
        telegram_id=message.from_user.id,
        name=name,
        surname=surname
    )

    await state.clear()
    await message.answer(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard(),
        parse_mode="HTML"
    )
    
@start_router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts_handler(message: types.Message):
    await message.answer(
        "üõé <b>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n\n"
        "üìç –ê–¥—Ä–µ—Å: –£–ª–∏—Ü–∞ –ì–æ—Å—Ç–∏–Ω–∏—á–Ω–∞—è, 1\n"
        "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (800) 555-35-35\n"
        "üë®üíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @raddan_mode\n\n"
        "‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ",
        parse_mode="HTML"
    )

@start_router.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about_handler(message: types.Message):
    await message.answer(
        "üè® <b>Luxury Hotel ‚Äî –≤–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–¥—ã—Ö!</b>\n\n"
        "‚ú® –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n"
        "‚úÖ –ù–æ–º–µ—Ä–∞ —Å –≤–∏–¥–æ–º –Ω–∞ –º–æ—Ä–µ\n"
        "‚úÖ –†–µ—Å—Ç–æ—Ä–∞–Ω –≤—ã—Å–æ–∫–æ–π –∫—É—Ö–Ω–∏\n"
        "‚úÖ –°–ü–ê-—Ü–µ–Ω—Ç—Ä –∏ –±–∞—Å—Å–µ–π–Ω\n"
        "‚úÖ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª—ã\n\n"
        "üåü –ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π Wi-Fi\n"
        "‚Ä¢ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å\n"
        "‚Ä¢ –ü–∞—Ä–∫–æ–≤–∫–∞ –¥–ª—è –≥–æ—Å—Ç–µ–π\n"
        "‚Ä¢ –î–µ—Ç—Å–∫–∞—è –∫–æ–º–Ω–∞—Ç–∞\n\n"
        "üí¨ <i>–í–∞—à –∫–æ–º—Ñ–æ—Ä—Ç ‚Äî –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!</i>",
        parse_mode="HTML"
    )