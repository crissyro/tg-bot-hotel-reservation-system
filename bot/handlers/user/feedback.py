import logging

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from services.mongo_database import MongoDatabase
from models.mongo_models import Review
from keyboards.user import main_keyboard

feedback_router = Router()

class FeedbackStates(StatesGroup):
    waiting_for_review = State()
    waiting_for_rating = State()

def back_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞")
    return builder.as_markup(resize_keyboard=True)

@feedback_router.message(F.text == "üìù –û—Ç–∑—ã–≤")
async def handle_feedback(message: types.Message, state: FSMContext):
    await state.set_state(FeedbackStates.waiting_for_review)
    await message.answer(
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ–± –æ—Ç–µ–ª–µ:",
        reply_markup=back_keyboard()
    )

@feedback_router.message(FeedbackStates.waiting_for_review, F.text == "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞")
async def cancel_feedback(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup= main_keyboard  #types.ReplyKeyboardRemove()
    )

@feedback_router.message(FeedbackStates.waiting_for_review)
async def process_review(message: types.Message, state: FSMContext):
    await state.update_data(review_text=message.text)
    await state.set_state(FeedbackStates.waiting_for_rating)
    await message.answer(
        "‚≠êÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 0 –¥–æ 10:\n"
        "(0 - –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ, 10 - –æ—Ç–ª–∏—á–Ω–æ)",
        reply_markup=back_keyboard()
    )

@feedback_router.message(FeedbackStates.waiting_for_rating, F.text == "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞")
async def cancel_rating(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=main_keyboard
    )

@feedback_router.message(FeedbackStates.waiting_for_rating)
async def process_rating(message: types.Message, state: FSMContext, mongo_db: MongoDatabase):
    try:
        rating = int(message.text)
        if 0 <= rating <= 10:
            data = await state.get_data()
            review = Review(
                user_id=message.from_user.id,
                text=data['review_text'],
                rating=rating
            )
            
            result = await mongo_db.save_review(review.dict())
            if result.acknowledged:
                await message.answer(
                    "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!",
                    reply_markup=main_keyboard
                )
                logging.info(f"Review saved: {review}")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞")
            
            await state.clear()
        else:
            await message.answer("‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10:")